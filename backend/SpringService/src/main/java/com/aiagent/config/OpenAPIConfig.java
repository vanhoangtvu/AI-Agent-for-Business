package com.aiagent.config;

import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.security.SecurityRequirement;
import io.swagger.v3.oas.models.security.SecurityScheme;
import io.swagger.v3.oas.models.servers.Server;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.List;

/**
 * OpenAPI/Swagger Configuration
 * 
 * Swagger UI: http://localhost:8100/swagger-ui.html
 * API Docs: http://localhost:8100/api-docs
 * 
 * @author Nguy·ªÖn VƒÉn Ho√†ng
 */
@Configuration
public class OpenAPIConfig {

    @Value("${server.port:8100}")
    private String serverPort;

    @Bean
    public OpenAPI customOpenAPI() {
        return new OpenAPI()
                .info(apiInfo())
                .servers(List.of(
                        new Server()
                                .url("http://localhost:" + serverPort)
                                .description("Development Server"),
                        new Server()
                                .url("https://api.aiagent.com")
                                .description("Production Server (Future)")
                ))
                .components(new Components()
                        .addSecuritySchemes("Bearer Authentication", securityScheme())
                )
                .addSecurityItem(new SecurityRequirement().addList("Bearer Authentication"));
    }

    private Info apiInfo() {
        return new Info()
                .title("AI Agent for Business API")
                .version("1.0.0")
                .description("""
                        # AI Agent for Business - Backend API
                        
                        ## ƒê·ªì √Ån Chuy√™n Ng√†nh
                        
                        **Sinh vi√™n th·ª±c hi·ªán:** Nguy·ªÖn VƒÉn Ho√†ng  
                        **MSSV:** 110122078  
                        **Tr∆∞·ªùng:** ƒê·∫°i H·ªçc Tr√† Vinh  
                        **Khoa:** C√¥ng Ngh·ªá Th√¥ng Tin  
                        **Gi√°o vi√™n h∆∞·ªõng d·∫´n:** ThS. TS. Nguy·ªÖn B·∫£o √Çn
                        
                        ## M√¥ T·∫£
                        
                        H·ªá th·ªëng AI th√¥ng minh h·ªó tr·ª£ doanh nghi·ªáp trong vi·ªác:
                        - üí¨ ChƒÉm s√≥c kh√°ch h√†ng t·ª± ƒë·ªông
                        - üìö T∆∞ v·∫•n s·∫£n ph·∫©m d·ª±a tr√™n knowledge base
                        - üìä Ph√¢n t√≠ch v√† ƒë·ªÅ xu·∫•t chi·∫øn l∆∞·ª£c kinh doanh
                        - üîç T√¨m ki·∫øm th√¥ng minh v·ªõi RAG (Retrieval-Augmented Generation)
                        
                        ## C√¥ng Ngh·ªá
                        
                        - **Backend:** Spring Boot 3.2 + Java 17
                        - **Security:** JWT Authentication
                        - **Database:** MySQL 8.0
                        - **Cache:** Redis
                        - **AI Service:** Python FastAPI + Gemini API
                        - **Real-time:** WebSocket
                        
                        ## Authentication
                        
                        API s·ª≠ d·ª•ng JWT Bearer Token. ƒê·ªÉ s·ª≠ d·ª•ng:
                        
                        1. ƒêƒÉng k√Ω t√†i kho·∫£n: `POST /api/auth/register`
                        2. ƒêƒÉng nh·∫≠p: `POST /api/auth/login`
                        3. Copy token t·ª´ response
                        4. Click n√∫t "Authorize" ·ªü tr√™n
                        5. Nh·∫≠p: `Bearer YOUR_TOKEN_HERE`
                        
                        ## Support
                        
                        - **Email:** 110122078@st.tvu.edu.vn
                        - **GitHub:** https://github.com/vanhoangtvu/AI-Agent-for-Business
                        """)
                .contact(new Contact()
                        .name("Nguy·ªÖn VƒÉn Ho√†ng")
                        .email("110122078@st.tvu.edu.vn")
                        .url("https://github.com/vanhoangtvu")
                )
                .license(new License()
                        .name("MIT License")
                        .url("https://opensource.org/licenses/MIT")
                );
    }

    private SecurityScheme securityScheme() {
        return new SecurityScheme()
                .type(SecurityScheme.Type.HTTP)
                .scheme("bearer")
                .bearerFormat("JWT")
                .in(SecurityScheme.In.HEADER)
                .name("Authorization")
                .description("Enter JWT token with 'Bearer ' prefix. Example: Bearer eyJhbGc...");
    }

}

